// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "bayesQVAR_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bootsSimuOnce
List bootsSimuOnce(const RcppDf& data_end, const RcppDf& data_exo, const int& lag_end, const int& lag_exo, const int& sampleSize, const List& AList_eachProb);
RcppExport SEXP _bayesQVAR_bootsSimuOnce(SEXP data_endSEXP, SEXP data_exoSEXP, SEXP lag_endSEXP, SEXP lag_exoSEXP, SEXP sampleSizeSEXP, SEXP AList_eachProbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const RcppDf& >::type data_end(data_endSEXP);
    Rcpp::traits::input_parameter< const RcppDf& >::type data_exo(data_exoSEXP);
    Rcpp::traits::input_parameter< const int& >::type lag_end(lag_endSEXP);
    Rcpp::traits::input_parameter< const int& >::type lag_exo(lag_exoSEXP);
    Rcpp::traits::input_parameter< const int& >::type sampleSize(sampleSizeSEXP);
    Rcpp::traits::input_parameter< const List& >::type AList_eachProb(AList_eachProbSEXP);
    rcpp_result_gen = Rcpp::wrap(bootsSimuOnce(data_end, data_exo, lag_end, lag_exo, sampleSize, AList_eachProb));
    return rcpp_result_gen;
END_RCPP
}
// calQIRFwithA
RcppDf calQIRFwithA(const List& AList_eachHorizon, const EigenVec& sigmaSqrt, const EigenMat& A0, const RcppIntVec& idx_impulse, const RcppIntVec& idx_response, const int& n_end, const int& lag_end, const bool& mean, const EigenMat& A_mean);
RcppExport SEXP _bayesQVAR_calQIRFwithA(SEXP AList_eachHorizonSEXP, SEXP sigmaSqrtSEXP, SEXP A0SEXP, SEXP idx_impulseSEXP, SEXP idx_responseSEXP, SEXP n_endSEXP, SEXP lag_endSEXP, SEXP meanSEXP, SEXP A_meanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type AList_eachHorizon(AList_eachHorizonSEXP);
    Rcpp::traits::input_parameter< const EigenVec& >::type sigmaSqrt(sigmaSqrtSEXP);
    Rcpp::traits::input_parameter< const EigenMat& >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< const RcppIntVec& >::type idx_impulse(idx_impulseSEXP);
    Rcpp::traits::input_parameter< const RcppIntVec& >::type idx_response(idx_responseSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_end(n_endSEXP);
    Rcpp::traits::input_parameter< const int& >::type lag_end(lag_endSEXP);
    Rcpp::traits::input_parameter< const bool& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const EigenMat& >::type A_mean(A_meanSEXP);
    rcpp_result_gen = Rcpp::wrap(calQIRFwithA(AList_eachHorizon, sigmaSqrt, A0, idx_impulse, idx_response, n_end, lag_end, mean, A_mean));
    return rcpp_result_gen;
END_RCPP
}
// calQIRFOnce
List calQIRFOnce(const List& modelSpecif, const RcppCharVec& names_impulse, const RcppCharVec& names_response, const EigenVec& sigmaSqrt, const int& horizon, const EigenMat& probPath, const bool& mean, const Nullable<List>& counterfactual);
RcppExport SEXP _bayesQVAR_calQIRFOnce(SEXP modelSpecifSEXP, SEXP names_impulseSEXP, SEXP names_responseSEXP, SEXP sigmaSqrtSEXP, SEXP horizonSEXP, SEXP probPathSEXP, SEXP meanSEXP, SEXP counterfactualSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type modelSpecif(modelSpecifSEXP);
    Rcpp::traits::input_parameter< const RcppCharVec& >::type names_impulse(names_impulseSEXP);
    Rcpp::traits::input_parameter< const RcppCharVec& >::type names_response(names_responseSEXP);
    Rcpp::traits::input_parameter< const EigenVec& >::type sigmaSqrt(sigmaSqrtSEXP);
    Rcpp::traits::input_parameter< const int& >::type horizon(horizonSEXP);
    Rcpp::traits::input_parameter< const EigenMat& >::type probPath(probPathSEXP);
    Rcpp::traits::input_parameter< const bool& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const Nullable<List>& >::type counterfactual(counterfactualSEXP);
    rcpp_result_gen = Rcpp::wrap(calQIRFOnce(modelSpecif, names_impulse, names_response, sigmaSqrt, horizon, probPath, mean, counterfactual));
    return rcpp_result_gen;
END_RCPP
}
// constDesignMat
List constDesignMat(const RcppDf& data_end, const Rcpp::Nullable<RcppDf>& data_exo, const int& lag_end, const int& lag_exo);
RcppExport SEXP _bayesQVAR_constDesignMat(SEXP data_endSEXP, SEXP data_exoSEXP, SEXP lag_endSEXP, SEXP lag_exoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const RcppDf& >::type data_end(data_endSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<RcppDf>& >::type data_exo(data_exoSEXP);
    Rcpp::traits::input_parameter< const int& >::type lag_end(lag_endSEXP);
    Rcpp::traits::input_parameter< const int& >::type lag_exo(lag_exoSEXP);
    rcpp_result_gen = Rcpp::wrap(constDesignMat(data_end, data_exo, lag_end, lag_exo));
    return rcpp_result_gen;
END_RCPP
}
// estBQVAR
List estBQVAR(const RcppDf& data_end, const RcppIntVec& lag, const RcppNumVec& alpha, const Rcpp::Nullable<RcppDf>& data_exo, const Rcpp::Nullable<List>& prior, const Rcpp::Nullable<List>& samplerSetting, const std::string& method, const int& printFreq, const bool& mute);
RcppExport SEXP _bayesQVAR_estBQVAR(SEXP data_endSEXP, SEXP lagSEXP, SEXP alphaSEXP, SEXP data_exoSEXP, SEXP priorSEXP, SEXP samplerSettingSEXP, SEXP methodSEXP, SEXP printFreqSEXP, SEXP muteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const RcppDf& >::type data_end(data_endSEXP);
    Rcpp::traits::input_parameter< const RcppIntVec& >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< const RcppNumVec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<RcppDf>& >::type data_exo(data_exoSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<List>& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<List>& >::type samplerSetting(samplerSettingSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const int& >::type printFreq(printFreqSEXP);
    Rcpp::traits::input_parameter< const bool& >::type mute(muteSEXP);
    rcpp_result_gen = Rcpp::wrap(estBQVAR(data_end, lag, alpha, data_exo, prior, samplerSetting, method, printFreq, mute));
    return rcpp_result_gen;
END_RCPP
}
// estMultiBQVAR
List estMultiBQVAR(const List& modelSpecif, const EigenMat& alphaMat);
RcppExport SEXP _bayesQVAR_estMultiBQVAR(SEXP modelSpecifSEXP, SEXP alphaMatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type modelSpecif(modelSpecifSEXP);
    Rcpp::traits::input_parameter< const EigenMat& >::type alphaMat(alphaMatSEXP);
    rcpp_result_gen = Rcpp::wrap(estMultiBQVAR(modelSpecif, alphaMat));
    return rcpp_result_gen;
END_RCPP
}
// estVARbyOLS
EigenMat estVARbyOLS(const EigenMat& Y, const EigenMat& X);
RcppExport SEXP _bayesQVAR_estVARbyOLS(SEXP YSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const EigenMat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const EigenMat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(estVARbyOLS(Y, X));
    return rcpp_result_gen;
END_RCPP
}
// estBVAR
List estBVAR(const RcppDf& data_end, const RcppIntVec& lag, const Rcpp::Nullable<RcppDf>& data_exo, const List& prior, const List& samplerSetting);
RcppExport SEXP _bayesQVAR_estBVAR(SEXP data_endSEXP, SEXP lagSEXP, SEXP data_exoSEXP, SEXP priorSEXP, SEXP samplerSettingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const RcppDf& >::type data_end(data_endSEXP);
    Rcpp::traits::input_parameter< const RcppIntVec& >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<RcppDf>& >::type data_exo(data_exoSEXP);
    Rcpp::traits::input_parameter< const List& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< const List& >::type samplerSetting(samplerSettingSEXP);
    rcpp_result_gen = Rcpp::wrap(estBVAR(data_end, lag, data_exo, prior, samplerSetting));
    return rcpp_result_gen;
END_RCPP
}
// estSigmaOfBVAR
EigenVec estSigmaOfBVAR(const RcppDf& data_end, const RcppIntVec& lag, const Rcpp::Nullable<RcppDf>& data_exo, const List& prior, const List& samplerSetting);
RcppExport SEXP _bayesQVAR_estSigmaOfBVAR(SEXP data_endSEXP, SEXP lagSEXP, SEXP data_exoSEXP, SEXP priorSEXP, SEXP samplerSettingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const RcppDf& >::type data_end(data_endSEXP);
    Rcpp::traits::input_parameter< const RcppIntVec& >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<RcppDf>& >::type data_exo(data_exoSEXP);
    Rcpp::traits::input_parameter< const List& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< const List& >::type samplerSetting(samplerSettingSEXP);
    rcpp_result_gen = Rcpp::wrap(estSigmaOfBVAR(data_end, lag, data_exo, prior, samplerSetting));
    return rcpp_result_gen;
END_RCPP
}
// forecastQuant
List forecastQuant(const List& modelSpecif, const int& horizon, const EigenMat& probPath, const bool mean);
RcppExport SEXP _bayesQVAR_forecastQuant(SEXP modelSpecifSEXP, SEXP horizonSEXP, SEXP probPathSEXP, SEXP meanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type modelSpecif(modelSpecifSEXP);
    Rcpp::traits::input_parameter< const int& >::type horizon(horizonSEXP);
    Rcpp::traits::input_parameter< const EigenMat& >::type probPath(probPathSEXP);
    Rcpp::traits::input_parameter< const bool >::type mean(meanSEXP);
    rcpp_result_gen = Rcpp::wrap(forecastQuant(modelSpecif, horizon, probPath, mean));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bayesQVAR_bootsSimuOnce", (DL_FUNC) &_bayesQVAR_bootsSimuOnce, 6},
    {"_bayesQVAR_calQIRFwithA", (DL_FUNC) &_bayesQVAR_calQIRFwithA, 9},
    {"_bayesQVAR_calQIRFOnce", (DL_FUNC) &_bayesQVAR_calQIRFOnce, 8},
    {"_bayesQVAR_constDesignMat", (DL_FUNC) &_bayesQVAR_constDesignMat, 4},
    {"_bayesQVAR_estBQVAR", (DL_FUNC) &_bayesQVAR_estBQVAR, 9},
    {"_bayesQVAR_estMultiBQVAR", (DL_FUNC) &_bayesQVAR_estMultiBQVAR, 2},
    {"_bayesQVAR_estVARbyOLS", (DL_FUNC) &_bayesQVAR_estVARbyOLS, 2},
    {"_bayesQVAR_estBVAR", (DL_FUNC) &_bayesQVAR_estBVAR, 5},
    {"_bayesQVAR_estSigmaOfBVAR", (DL_FUNC) &_bayesQVAR_estSigmaOfBVAR, 5},
    {"_bayesQVAR_forecastQuant", (DL_FUNC) &_bayesQVAR_forecastQuant, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_bayesQVAR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
